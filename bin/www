#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('bcdv1008-finalproject:server');
const http = require('http');
const mongoose = require('mongoose');

const HistoryChat = require('../models/HistoryChat');
const formatMessage = require('../exports/messages');
const {
  userJoin,
  getCurrentUser,
  userLeave,
  getRoomUsers
} = require('../exports/users');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

// TODO Handle db writting someway

const io = require("socket.io")(server)

// New connection 
io.on('connection', socket => {
  console.log('Connected...');
  //console.log(`Socket: ${socket.id}`);

  // TODO Change welcome CSS
  socket.on('joinRoom', ({ username, room }) => {
    const user = userJoin(socket.id, username, room);
    socket.join(user.room);

    // Current user
    socket.emit('message', formatMessage(username, 'Welcome to Chat'));

    // Broadcast when a user connects
    socket.broadcast
      .to(user.room)
      .emit(
        'messageJoinLeft',
        formatMessage(user.username, ' joined the chat')
      );

    // Send users and room info
    io
      .to(user.room)
      .emit('roomUsers', {
        room: user.room,
        users: getRoomUsers(user.room)
      });
  });

  // Listen for chatMessage
  socket.on('chatMessage', msg => {

    const newHistory = new HistoryChat(
      {
        user: msg.user,
        room: mongoose.Types.ObjectId(msg.room),
        message: msg.msg,
        date: msg.date
      }
    );

    newHistory.save((err) => {
      if (err) {
        throw err;
      }
      console.log('New history: ' + newHistory.message);
    });

    // const user = getCurrentUser(socket.id);

    io
      .to(msg.room)
      .emit('message', formatMessage(msg.user, msg.msg));
  });

  // Runs when client disconnects
  socket.on('disconnect', () => {
    const user = userLeave(socket.id);
    socket.leave(user.room);

    if (user) {
      io
        .to(user.room)
        .emit(
          'messageJoinLeft',
          formatMessage(user.username, 'has left the chat')
        );

      // Send users and room info
      io
        .to(user.room)
        .emit('roomUsers', {
          room: user.room,
          users: getRoomUsers(user.room)
        });
    }
  });
});